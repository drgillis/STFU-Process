#+TITLE:     STFU Process
#+SUBTITLE:  Suppress Text From Unterse Process
#+AUTHOR:    Dan Gillis
#+EMAIL:     (concat "dev" at-sign "dangillis.net")
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:nil toc:2 p:t


STFU Process is an Emacs minor-mode to truncate long outputs from
sub-processes. Its main goals are to:
1. Prevent long lines from being print.
2. Prevent slowdowns caused by long output that takes longer to print than to compute.
3. Prevent your mistakes from ruining your life.

Once the maximum output length has occurred, STFU Process replaces entire
strings received by the sub-process with a specified replacement. Typically
this will result in shrinking the total output size by two to three orders of
magnitude.

This package is most likely to be useful for processes controlled by
pipes. This package was developed in particular for Windows Emacs, since it
doesn't seem to have support for pty processes at the moment.
* How to Use
Simply enable STFU Process mode in a process buffer. All outputs returned
longer than the defined maximum output length or individual line length will
be truncated and replaced with a customizable replacement string
(`stfu-process-supression-string` and
`stfu-process-supression-long-line-string`, respectively).

For those in a hurry to assert man's dominion over machine, the command
`stfu-now` can be used to immediately activate the filter and interrupt the
stream if the process is pty-controlled. The more polite can use the command
`stfu-ignore`, which also immediately activates the filter but does not
attempt to interrupt the process. These commands both immediately suppress the
output whereas activating the minor mode would not cause this to happen until
the current output length exceeds the maximum length allowed.

If you think you may regularly need this mode, it is recommended to set `C-!`
to `stfu-now` globally by adding the following code to your init file
`(global-set-key (kbd "C-!") 'stfu-now)`. It is also recommended that you look at
your development practices, because you are probably doing something wrong if
this is a frequent occurrence.
* But Why?
*tl;dr Bad development practices*

While using Python in Windows Emacs for data analysis, I would often end up
with lists of 100,000+ objects each with string representations of over 100
characters each. When exploring these data in the Python REPL, one bad command
could result in Emacs attempting to print such a long line that the process
would essentially be bricked. Trying a keyboard interrupt would do nothing
since the Python process is controlled by a pipe rather than a pty on Windows.

Like any sane person, I figured that rather than fixing the problem in Python,
I should fix it with Emacs Lisp.
* (NS)FAQs
/Why not use iPython to truncate the output?/ In my experience, using the
iPython interpreter on Windows Emacs is unusably slow.

/Why not use an operating system that is actually useful for development?/
Sometimes you don't have a choice.

/Why don't you replace those lists with custom objects that have a
significantly more succinct string representation?/ I did do this eventually.
However, similar issues continue to bite me every once in a while.

/If the package prefix is `stfu-process`, why do some commands just the prefix
`stfu`?/ /Isn't that bad style?/ /Doesn't that offer a possible naming/
/collision in the extraodinarily likely scenario where someone else decides to
make a similarly named package?/ (stfu-now)

.
.
.
